name: CI/CD for django sample app

on:
  push:
    branches:
      - main
      - "feature/*"
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Specify your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Run linting
        run: |
          flake8 .  # Replace with your preferred linter and configuration
      - name: List files for debugging
        run: ls -R
      - name: Run migrations
        working-directory: ./app
        env:
          DJANGO_SETTINGS_MODULE: core.settings
        run: |
          python manage.py migrate

  setup-server:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python (Ansible dependency)
        run: sudo apt-get update && sudo apt-get install -y python3
      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Install Ansible
        shell: bash
        run: |
          sudo apt update
          pip install psycopg2-binary
          python -m pip install --upgrade ansible

          # Force install even if collection exists
          ansible-galaxy collection install community.postgresql --force
      - name: Debug Ansible Collections
        run: |
          ansible-galaxy collection list | grep "community.postgresql"
          ls -l ~/.ansible/collections/ansible_collections/community/postgresql

      - name: Test SSH Connection
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo 'Success!'"
      - name: Create encrypted extra-vars file
        run: |
          cat <<EOF > /tmp/vars.yml
          postgres_user: ${{ secrets.POSTGRES_USER }}
          postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
          postgres_db: ${{ secrets.POSTGRES_DB }}
          EOF
          # Optional: Encrypt the file (if you have ansible-vault setup)

      - name: Cache Ansible collections
        uses: actions/cache@v3
        with:
          path: ~/.ansible/collections
          key: ${{ runner.os }}-ansible-collections
          restore-keys: |
            ${{ runner.os }}-ansible-collections
      - name: List files for debugging
        run: ls -R
      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ./ansible/playbooks/playbook.yaml
          inventory: |
            [all]
            ${{ secrets.SERVER_IP }} ansible_user=${{ secrets.SSH_USER }} ansible_ssh_private_key_file=./key.pem
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Auto-creates ./key.pem
          options: |
            -vvv
            --extra-vars=@/tmp/vars.yml
  build-and-push:
    needs: [setup-server]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # Use owner/org name
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Django Image to GHCR and Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile.prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/app:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
            ghcr.io/${{ github.repository_owner }}/app:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/app:latest

      - name: Install Docker via Ansible
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ./ansible/playbooks/setup-docker.yaml
          inventory: |
            [all]
            ${{ secrets.SERVER_IP }} ansible_user=${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to Server
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "docker pull docker.io/${{ secrets.DOCKERHUB_USERNAME }}/app:latest && docker-compose -f ./docker-compose.yml up -d"
